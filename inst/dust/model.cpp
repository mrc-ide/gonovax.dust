// Generated by odin.dust (version 0.2.7) - do not edit
template <typename real_t, typename container>
HOSTDEVICE real_t odin_sum1(const container x, size_t from, size_t to);
template <typename real_t, typename container>
HOSTDEVICE real_t odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1);
template <typename real_t, typename container>
HOSTDEVICE real_t odin_sum3(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int dim_x_1, int dim_x_12);
template <typename real_t, typename T, typename U>
HOSTDEVICE real_t fmodr(T x, U y) {
  real_t tmp = std::fmod(static_cast<real_t>(x), static_cast<real_t>(y));
  if (tmp * y < 0) {
    tmp += y;
  }
  return tmp;
}

// These exist to support the model on the gpu, as in C++14 std::min
// and std::max are constexpr and error without --expt-relaxed-constexpr
template <typename T>
HOSTDEVICE T odin_min(T x, T y) {
  return x < y ? x : y;
}

template <typename T>
HOSTDEVICE T odin_max(T x, T y) {
  return x > y ? x : y;
}
// [[dust::class(model)]]
// [[dust::param(A0, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta_step, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(D, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(enr, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(epsilon, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(eta_h_step, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(eta_l_step, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(exr, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(fix_pop, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(I0, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(mu, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(nu, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(psi, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(q, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(rho, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(S0, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(sigma, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(T0, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(u_vbe, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(u_vod, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(u_vos, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(U0, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(vax_step, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(vbe, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(vea, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(ved, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(vei, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(ves, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(vod, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(vos, has_default = FALSE, default_value = NULL, rank = 3, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(w, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n_vax, has_default = TRUE, default_value = 1L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
class model {
public:
  typedef double real_t;
  typedef dust::no_data data_t;
  struct shared_t {
    std::vector<real_t> A0;
    std::vector<real_t> beta_step;
    std::vector<real_t> D;
    int dim_A;
    int dim_A_1;
    int dim_A_2;
    int dim_A0;
    int dim_A0_1;
    int dim_A0_2;
    int dim_beta_step;
    int dim_C;
    int dim_C_1;
    int dim_C_2;
    int dim_cum_diag_a;
    int dim_cum_diag_a_1;
    int dim_cum_diag_a_2;
    int dim_cum_diag_s;
    int dim_cum_diag_s_1;
    int dim_cum_diag_s_2;
    int dim_cum_incid;
    int dim_cum_incid_1;
    int dim_cum_incid_2;
    int dim_cum_screened;
    int dim_cum_screened_1;
    int dim_cum_screened_2;
    int dim_cum_treated;
    int dim_cum_treated_1;
    int dim_cum_treated_2;
    int dim_cum_vaccinated;
    int dim_cum_vaccinated_1;
    int dim_cum_vaccinated_2;
    int dim_D;
    int dim_diag_a;
    int dim_diag_a_1;
    int dim_diag_a_2;
    int dim_diag_s;
    int dim_diag_s_1;
    int dim_diag_s_2;
    int dim_eta;
    int dim_eta_h_step;
    int dim_eta_l_step;
    int dim_foi_LH;
    int dim_I;
    int dim_I_1;
    int dim_I_2;
    int dim_I0;
    int dim_I0_1;
    int dim_I0_2;
    int dim_incid;
    int dim_incid_1;
    int dim_incid_2;
    int dim_lambda;
    int dim_N;
    int dim_N_1;
    int dim_N_2;
    int dim_n_A;
    int dim_n_A_1;
    int dim_n_A_2;
    int dim_n_AT;
    int dim_n_AT_1;
    int dim_n_AT_2;
    int dim_n_AU;
    int dim_n_AU_1;
    int dim_n_AU_2;
    int dim_n_Aw;
    int dim_n_Aw_1;
    int dim_n_Aw_2;
    int dim_n_Ax;
    int dim_n_Ax_1;
    int dim_n_Ax_2;
    int dim_n_I;
    int dim_n_I_1;
    int dim_n_I_2;
    int dim_n_IA;
    int dim_n_IA_1;
    int dim_n_IA_2;
    int dim_n_IS;
    int dim_n_IS_1;
    int dim_n_IS_2;
    int dim_n_Iw;
    int dim_n_Iw_1;
    int dim_n_Iw_2;
    int dim_n_Ix;
    int dim_n_Ix_1;
    int dim_n_Ix_2;
    int dim_n_S;
    int dim_n_S_1;
    int dim_n_S_2;
    int dim_n_ST;
    int dim_n_ST_1;
    int dim_n_ST_2;
    int dim_n_Sw;
    int dim_n_Sw_1;
    int dim_n_Sw_2;
    int dim_n_Sx;
    int dim_n_Sx_1;
    int dim_n_Sx_2;
    int dim_n_T;
    int dim_n_T_1;
    int dim_n_T_2;
    int dim_n_TU;
    int dim_n_TU_1;
    int dim_n_TU_2;
    int dim_n_Tw;
    int dim_n_Tw_1;
    int dim_n_Tw_2;
    int dim_n_Tx;
    int dim_n_Tx_1;
    int dim_n_Tx_2;
    int dim_n_U;
    int dim_n_U_1;
    int dim_n_U_2;
    int dim_n_UI;
    int dim_n_UI_1;
    int dim_n_UI_2;
    int dim_n_UU;
    int dim_n_UU_1;
    int dim_n_UU_2;
    int dim_n_Uw;
    int dim_n_Uw_1;
    int dim_n_Uw_2;
    int dim_n_Ux;
    int dim_n_Ux_1;
    int dim_n_Ux_2;
    int dim_n_v;
    int dim_n_v_1;
    int dim_n_v_12;
    int dim_n_v_2;
    int dim_n_v_3;
    int dim_n_vbe;
    int dim_n_vbe_1;
    int dim_n_vbe_2;
    int dim_n_vod;
    int dim_n_vod_1;
    int dim_n_vod_2;
    int dim_n_vos;
    int dim_n_vos_1;
    int dim_n_vos_2;
    int dim_n_x;
    int dim_n_xU;
    int dim_n_xU_1;
    int dim_n_xU_2;
    int dim_Np;
    int dim_p;
    int dim_prop_C;
    int dim_q;
    int dim_r_A;
    int dim_r_A_1;
    int dim_r_A_2;
    int dim_r_AT;
    int dim_r_AT_1;
    int dim_r_AT_2;
    int dim_r_AU;
    int dim_r_AU_1;
    int dim_r_AU_2;
    int dim_r_I;
    int dim_r_I_1;
    int dim_r_I_2;
    int dim_r_S;
    int dim_r_S_1;
    int dim_r_S_2;
    int dim_r_ST;
    int dim_r_ST_1;
    int dim_r_ST_2;
    int dim_r_T;
    int dim_r_T_1;
    int dim_r_T_2;
    int dim_r_TU;
    int dim_r_TU_1;
    int dim_r_TU_2;
    int dim_r_U;
    int dim_r_U_1;
    int dim_r_U_2;
    int dim_r_UI;
    int dim_r_UI_1;
    int dim_r_UI_2;
    int dim_r_UU;
    int dim_r_UU_1;
    int dim_r_UU_2;
    int dim_S;
    int dim_S_1;
    int dim_S_2;
    int dim_S0;
    int dim_S0_1;
    int dim_S0_2;
    int dim_screened;
    int dim_screened_1;
    int dim_screened_2;
    int dim_T;
    int dim_T_1;
    int dim_T_2;
    int dim_T0;
    int dim_T0_1;
    int dim_T0_2;
    int dim_treated;
    int dim_treated_1;
    int dim_treated_2;
    int dim_U;
    int dim_U_1;
    int dim_U_2;
    int dim_u_vbe;
    int dim_u_vbe_1;
    int dim_u_vbe_2;
    int dim_u_vod;
    int dim_u_vod_1;
    int dim_u_vod_2;
    int dim_u_vos;
    int dim_u_vos_1;
    int dim_u_vos_2;
    int dim_U0;
    int dim_U0_1;
    int dim_U0_2;
    int dim_vaccinated;
    int dim_vaccinated_1;
    int dim_vaccinated_2;
    int dim_vax_step;
    int dim_vbe;
    int dim_vbe_1;
    int dim_vbe_12;
    int dim_vbe_2;
    int dim_vbe_3;
    int dim_vea;
    int dim_ved;
    int dim_vei;
    int dim_ves;
    int dim_vod;
    int dim_vod_1;
    int dim_vod_12;
    int dim_vod_2;
    int dim_vod_3;
    int dim_vos;
    int dim_vos_1;
    int dim_vos_12;
    int dim_vos_2;
    int dim_vos_3;
    int dim_w;
    int dim_w_1;
    int dim_w_2;
    int dim_wA;
    int dim_wA_1;
    int dim_wA_12;
    int dim_wA_2;
    int dim_wA_3;
    int dim_wI;
    int dim_wI_1;
    int dim_wI_12;
    int dim_wI_2;
    int dim_wI_3;
    int dim_wS;
    int dim_wS_1;
    int dim_wS_12;
    int dim_wS_2;
    int dim_wS_3;
    int dim_wT;
    int dim_wT_1;
    int dim_wT_12;
    int dim_wT_2;
    int dim_wT_3;
    int dim_wU;
    int dim_wU_1;
    int dim_wU_12;
    int dim_wU_2;
    int dim_wU_3;
    real_t dt;
    real_t enr;
    real_t epsilon;
    std::vector<real_t> eta_h_step;
    std::vector<real_t> eta_l_step;
    real_t exr;
    real_t fix_pop;
    std::vector<real_t> I0;
    std::vector<real_t> initial_A;
    real_t initial_beta;
    std::vector<real_t> initial_cum_diag_a;
    std::vector<real_t> initial_cum_diag_s;
    std::vector<real_t> initial_cum_incid;
    std::vector<real_t> initial_cum_screened;
    std::vector<real_t> initial_cum_treated;
    std::vector<real_t> initial_cum_vaccinated;
    std::vector<real_t> initial_diag_a;
    std::vector<real_t> initial_diag_s;
    real_t initial_entrants;
    std::vector<real_t> initial_eta;
    std::vector<real_t> initial_I;
    std::vector<real_t> initial_incid;
    std::vector<real_t> initial_lambda;
    real_t initial_leavers;
    std::vector<real_t> initial_N;
    std::vector<real_t> initial_S;
    std::vector<real_t> initial_screened;
    std::vector<real_t> initial_T;
    real_t initial_time;
    std::vector<real_t> initial_treated;
    std::vector<real_t> initial_U;
    std::vector<real_t> initial_vaccinated;
    real_t mu;
    int n_group;
    int n_vax;
    real_t nu;
    int offset_variable_A;
    int offset_variable_cum_diag_a;
    int offset_variable_cum_diag_s;
    int offset_variable_cum_incid;
    int offset_variable_cum_screened;
    int offset_variable_cum_treated;
    int offset_variable_cum_vaccinated;
    int offset_variable_diag_a;
    int offset_variable_diag_s;
    int offset_variable_I;
    int offset_variable_incid;
    int offset_variable_lambda;
    int offset_variable_N;
    int offset_variable_S;
    int offset_variable_screened;
    int offset_variable_T;
    int offset_variable_treated;
    int offset_variable_U;
    int offset_variable_vaccinated;
    std::vector<real_t> p;
    real_t psi;
    std::vector<real_t> q;
    std::vector<real_t> r_AU;
    std::vector<real_t> r_I;
    std::vector<real_t> r_S;
    std::vector<real_t> r_ST;
    std::vector<real_t> r_T;
    std::vector<real_t> r_TU;
    real_t rho;
    std::vector<real_t> S0;
    real_t sigma;
    real_t steps_per_year;
    std::vector<real_t> T0;
    std::vector<real_t> u_vbe;
    std::vector<real_t> u_vod;
    std::vector<real_t> u_vos;
    std::vector<real_t> U0;
    std::vector<real_t> vax_step;
    std::vector<real_t> vbe;
    std::vector<real_t> vea;
    std::vector<real_t> ved;
    std::vector<real_t> vei;
    std::vector<real_t> ves;
    std::vector<real_t> vod;
    std::vector<real_t> vos;
    std::vector<real_t> w;
  };
  struct internal_t {
    std::vector<real_t> C;
    std::vector<real_t> foi_LH;
    std::vector<real_t> n_A;
    std::vector<real_t> n_AT;
    std::vector<real_t> n_AU;
    std::vector<real_t> n_Aw;
    std::vector<real_t> n_Ax;
    std::vector<real_t> n_I;
    std::vector<real_t> n_IA;
    std::vector<real_t> n_IS;
    std::vector<real_t> n_Iw;
    std::vector<real_t> n_Ix;
    std::vector<real_t> n_S;
    std::vector<real_t> n_ST;
    std::vector<real_t> n_Sw;
    std::vector<real_t> n_Sx;
    std::vector<real_t> n_T;
    std::vector<real_t> n_TU;
    std::vector<real_t> n_Tw;
    std::vector<real_t> n_Tx;
    std::vector<real_t> n_U;
    std::vector<real_t> n_UI;
    std::vector<real_t> n_UU;
    std::vector<real_t> n_Uw;
    std::vector<real_t> n_Ux;
    std::vector<real_t> n_v;
    std::vector<real_t> n_vbe;
    std::vector<real_t> n_vod;
    std::vector<real_t> n_vos;
    std::vector<real_t> n_x;
    std::vector<real_t> n_xU;
    std::vector<real_t> Np;
    std::vector<real_t> prop_C;
    std::vector<real_t> r_A;
    std::vector<real_t> r_AT;
    std::vector<real_t> r_U;
    std::vector<real_t> r_UI;
    std::vector<real_t> r_UU;
    std::vector<real_t> wA;
    std::vector<real_t> wI;
    std::vector<real_t> wS;
    std::vector<real_t> wT;
    std::vector<real_t> wU;
  };
  model(const dust::pars_t<model>& pars) :
    shared(pars.shared), internal(pars.internal) {
  }
  size_t size() {
    return shared->dim_A + shared->dim_cum_diag_a + shared->dim_cum_diag_s + shared->dim_cum_incid + shared->dim_cum_screened + shared->dim_cum_treated + shared->dim_cum_vaccinated + shared->dim_diag_a + shared->dim_diag_s + shared->dim_eta + shared->dim_I + shared->dim_incid + shared->dim_lambda + shared->dim_N + shared->dim_S + shared->dim_screened + shared->dim_T + shared->dim_treated + shared->dim_U + shared->dim_vaccinated + 4;
  }
  std::vector<real_t> initial(size_t step) {
    std::vector<real_t> state(shared->dim_A + shared->dim_cum_diag_a + shared->dim_cum_diag_s + shared->dim_cum_incid + shared->dim_cum_screened + shared->dim_cum_treated + shared->dim_cum_vaccinated + shared->dim_diag_a + shared->dim_diag_s + shared->dim_eta + shared->dim_I + shared->dim_incid + shared->dim_lambda + shared->dim_N + shared->dim_S + shared->dim_screened + shared->dim_T + shared->dim_treated + shared->dim_U + shared->dim_vaccinated + 4);
    state[0] = shared->initial_time;
    state[1] = shared->initial_entrants;
    state[2] = shared->initial_leavers;
    state[3] = shared->initial_beta;
    std::copy(shared->initial_eta.begin(), shared->initial_eta.end(), state.begin() + 4);
    std::copy(shared->initial_lambda.begin(), shared->initial_lambda.end(), state.begin() + shared->offset_variable_lambda);
    std::copy(shared->initial_U.begin(), shared->initial_U.end(), state.begin() + shared->offset_variable_U);
    std::copy(shared->initial_I.begin(), shared->initial_I.end(), state.begin() + shared->offset_variable_I);
    std::copy(shared->initial_A.begin(), shared->initial_A.end(), state.begin() + shared->offset_variable_A);
    std::copy(shared->initial_S.begin(), shared->initial_S.end(), state.begin() + shared->offset_variable_S);
    std::copy(shared->initial_T.begin(), shared->initial_T.end(), state.begin() + shared->offset_variable_T);
    std::copy(shared->initial_cum_incid.begin(), shared->initial_cum_incid.end(), state.begin() + shared->offset_variable_cum_incid);
    std::copy(shared->initial_cum_diag_a.begin(), shared->initial_cum_diag_a.end(), state.begin() + shared->offset_variable_cum_diag_a);
    std::copy(shared->initial_cum_diag_s.begin(), shared->initial_cum_diag_s.end(), state.begin() + shared->offset_variable_cum_diag_s);
    std::copy(shared->initial_cum_treated.begin(), shared->initial_cum_treated.end(), state.begin() + shared->offset_variable_cum_treated);
    std::copy(shared->initial_cum_screened.begin(), shared->initial_cum_screened.end(), state.begin() + shared->offset_variable_cum_screened);
    std::copy(shared->initial_cum_vaccinated.begin(), shared->initial_cum_vaccinated.end(), state.begin() + shared->offset_variable_cum_vaccinated);
    std::copy(shared->initial_incid.begin(), shared->initial_incid.end(), state.begin() + shared->offset_variable_incid);
    std::copy(shared->initial_diag_a.begin(), shared->initial_diag_a.end(), state.begin() + shared->offset_variable_diag_a);
    std::copy(shared->initial_diag_s.begin(), shared->initial_diag_s.end(), state.begin() + shared->offset_variable_diag_s);
    std::copy(shared->initial_treated.begin(), shared->initial_treated.end(), state.begin() + shared->offset_variable_treated);
    std::copy(shared->initial_screened.begin(), shared->initial_screened.end(), state.begin() + shared->offset_variable_screened);
    std::copy(shared->initial_vaccinated.begin(), shared->initial_vaccinated.end(), state.begin() + shared->offset_variable_vaccinated);
    std::copy(shared->initial_N.begin(), shared->initial_N.end(), state.begin() + shared->offset_variable_N);
    return state;
  }
  HOST void update(size_t step, const real_t * state, dust::rng_state_t<real_t>& rng_state, real_t * state_next) {
    const real_t beta = state[3];
    const real_t * eta = state + 4;
    const real_t * U = state + shared->offset_variable_U;
    const real_t * I = state + shared->offset_variable_I;
    const real_t * A = state + shared->offset_variable_A;
    const real_t * S = state + shared->offset_variable_S;
    const real_t * T = state + shared->offset_variable_T;
    const real_t * N = state + shared->offset_variable_N;
    const real_t * lambda = state + shared->offset_variable_lambda;
    const real_t * cum_incid = state + shared->offset_variable_cum_incid;
    const real_t * cum_diag_a = state + shared->offset_variable_cum_diag_a;
    const real_t * cum_diag_s = state + shared->offset_variable_cum_diag_s;
    const real_t * cum_treated = state + shared->offset_variable_cum_treated;
    const real_t * cum_screened = state + shared->offset_variable_cum_screened;
    const real_t * cum_vaccinated = state + shared->offset_variable_cum_vaccinated;
    const real_t * incid = state + shared->offset_variable_incid;
    const real_t * diag_a = state + shared->offset_variable_diag_a;
    const real_t * diag_s = state + shared->offset_variable_diag_s;
    const real_t * treated = state + shared->offset_variable_treated;
    const real_t * screened = state + shared->offset_variable_screened;
    const real_t * vaccinated = state + shared->offset_variable_vaccinated;
    const real_t entrants = state[1];
    const real_t leavers = state[2];
    state_next[3] = (static_cast<int>(step) >= shared->dim_beta_step ? shared->beta_step[shared->dim_beta_step - 1] : shared->beta_step[step + 1 - 1]);
    {
       int i = 1;
       state_next[4 + i - 1] = (static_cast<int>(step) >= shared->dim_eta_l_step ? shared->eta_l_step[shared->dim_eta_l_step - 1] : shared->eta_l_step[step + 1 - 1]);
    }
    {
       int i = 2;
       state_next[4 + i - 1] = (static_cast<int>(step) >= shared->dim_eta_h_step ? shared->eta_h_step[shared->dim_eta_h_step - 1] : shared->eta_h_step[step + 1 - 1]);
    }
    state_next[0] = (step + 1) * shared->dt;
    real_t vax_switch = (static_cast<int>(step) >= shared->dim_vax_step ? shared->vax_step[shared->dim_vax_step - 1] : shared->vax_step[step + 1 - 1]);
    for (int i = 1; i <= shared->dim_Np; ++i) {
      internal.Np[i - 1] = odin_sum2<real_t>(N, i - 1, i, 0, shared->dim_N_2, shared->dim_N_1) * shared->p[i - 1];
    }
    for (int i = 1; i <= shared->dim_N_1; ++i) {
      for (int j = 1; j <= shared->dim_N_2; ++j) {
        state_next[shared->offset_variable_N + i - 1 + shared->dim_N_1 * (j - 1)] = U[shared->dim_U_1 * (j - 1) + i - 1] + I[shared->dim_I_1 * (j - 1) + i - 1] + A[shared->dim_A_1 * (j - 1) + i - 1] + S[shared->dim_S_1 * (j - 1) + i - 1] + T[shared->dim_T_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_C_1; ++i) {
      for (int j = 1; j <= shared->dim_C_2; ++j) {
        internal.C[i - 1 + shared->dim_C_1 * (j - 1)] = (1 - shared->vei[j - 1]) * (I[shared->dim_I_1 * (j - 1) + i - 1] + A[shared->dim_A_1 * (j - 1) + i - 1] + S[shared->dim_S_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_r_AT_1; ++i) {
      for (int j = 1; j <= shared->dim_r_AT_2; ++j) {
        internal.r_AT[i - 1 + shared->dim_r_AT_1 * (j - 1)] = eta[i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_r_UI_1; ++i) {
      for (int j = 1; j <= shared->dim_r_UI_2; ++j) {
        internal.r_UI[i - 1 + shared->dim_r_UI_1 * (j - 1)] = lambda[i - 1] * (1 - shared->vea[j - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_r_UU_1; ++i) {
      for (int j = 1; j <= shared->dim_r_UU_2; ++j) {
        internal.r_UU[i - 1 + shared->dim_r_UU_1 * (j - 1)] = eta[i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_n_I_1; ++i) {
      for (int j = 1; j <= shared->dim_n_I_2; ++j) {
        internal.n_I[i - 1 + shared->dim_n_I_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(I[shared->dim_I_1 * (j - 1) + i - 1]), 1 - std::exp(- shared->r_I[shared->dim_r_I_1 * (j - 1) + i - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_prop_C; ++i) {
      internal.prop_C[i - 1] = odin_sum2<real_t>(internal.C.data(), i - 1, i, 0, shared->dim_C_2, shared->dim_C_1) / (real_t) odin_sum2<real_t>(N, i - 1, i, 0, shared->dim_N_2, shared->dim_N_1);
    }
    for (int i = 1; i <= shared->dim_r_A_1; ++i) {
      for (int j = 1; j <= shared->dim_r_A_2; ++j) {
        internal.r_A[i - 1 + shared->dim_r_A_1 * (j - 1)] = internal.r_AT[shared->dim_r_AT_1 * (j - 1) + i - 1] + shared->r_AU[shared->dim_r_AU_1 * (j - 1) + i - 1] + shared->exr;
      }
    }
    for (int i = 1; i <= shared->dim_r_U_1; ++i) {
      for (int j = 1; j <= shared->dim_r_U_2; ++j) {
        internal.r_U[i - 1 + shared->dim_r_U_1 * (j - 1)] = internal.r_UI[shared->dim_r_UI_1 * (j - 1) + i - 1] + internal.r_UU[shared->dim_r_UU_1 * (j - 1) + i - 1] + shared->exr;
      }
    }
    for (int i = 1; i <= shared->dim_foi_LH; ++i) {
      internal.foi_LH[i - 1] = internal.prop_C[i - 1] * internal.Np[i - 1] / (real_t) odin_sum1<real_t>(internal.Np.data(), 0, shared->dim_Np);
    }
    for (int i = 1; i <= shared->dim_n_A_1; ++i) {
      for (int j = 1; j <= shared->dim_n_A_2; ++j) {
        internal.n_A[i - 1 + shared->dim_n_A_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(A[shared->dim_A_1 * (j - 1) + i - 1]), 1 - std::exp(- internal.r_A[shared->dim_r_A_1 * (j - 1) + i - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_Iw_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Iw_2; ++j) {
        internal.n_Iw[i - 1 + shared->dim_n_Iw_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(I[shared->dim_I_1 * (j - 1) + i - 1] - internal.n_I[shared->dim_n_I_1 * (j - 1) + i - 1]), 1 - std::exp(shared->D[j - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_Ix_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Ix_2; ++j) {
        internal.n_Ix[i - 1 + shared->dim_n_Ix_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_I[shared->dim_n_I_1 * (j - 1) + i - 1]), shared->exr / (real_t) shared->r_I[shared->dim_r_I_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_S_1; ++i) {
      for (int j = 1; j <= shared->dim_n_S_2; ++j) {
        internal.n_S[i - 1 + shared->dim_n_S_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(S[shared->dim_S_1 * (j - 1) + i - 1]), 1 - std::exp(- shared->r_S[shared->dim_r_S_1 * (j - 1) + i - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_T_1; ++i) {
      for (int j = 1; j <= shared->dim_n_T_2; ++j) {
        internal.n_T[i - 1 + shared->dim_n_T_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(T[shared->dim_T_1 * (j - 1) + i - 1]), 1 - std::exp(- shared->r_T[shared->dim_r_T_1 * (j - 1) + i - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_U_1; ++i) {
      for (int j = 1; j <= shared->dim_n_U_2; ++j) {
        internal.n_U[i - 1 + shared->dim_n_U_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(U[shared->dim_U_1 * (j - 1) + i - 1]), 1 - std::exp(- internal.r_U[shared->dim_r_U_1 * (j - 1) + i - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_Aw_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Aw_2; ++j) {
        internal.n_Aw[i - 1 + shared->dim_n_Aw_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(A[shared->dim_A_1 * (j - 1) + i - 1] - internal.n_A[shared->dim_n_A_1 * (j - 1) + i - 1]), 1 - std::exp(shared->D[j - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_Ax_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Ax_2; ++j) {
        internal.n_Ax[i - 1 + shared->dim_n_Ax_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_A[shared->dim_n_A_1 * (j - 1) + i - 1]), shared->exr / (real_t) internal.r_A[shared->dim_r_A_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_IS_1; ++i) {
      for (int j = 1; j <= shared->dim_n_IS_2; ++j) {
        internal.n_IS[i - 1 + shared->dim_n_IS_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_I[shared->dim_n_I_1 * (j - 1) + i - 1] - internal.n_Ix[shared->dim_n_Ix_1 * (j - 1) + i - 1]), (1 - shared->ves[j - 1]) * shared->psi);
      }
    }
    for (int i = 1; i <= shared->dim_n_Sw_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Sw_2; ++j) {
        internal.n_Sw[i - 1 + shared->dim_n_Sw_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(S[shared->dim_S_1 * (j - 1) + i - 1] - internal.n_S[shared->dim_n_S_1 * (j - 1) + i - 1]), 1 - std::exp(shared->D[j - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_Sx_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Sx_2; ++j) {
        internal.n_Sx[i - 1 + shared->dim_n_Sx_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_S[shared->dim_n_S_1 * (j - 1) + i - 1]), shared->exr / (real_t) shared->r_S[shared->dim_r_S_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_Tw_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Tw_2; ++j) {
        internal.n_Tw[i - 1 + shared->dim_n_Tw_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(T[shared->dim_T_1 * (j - 1) + i - 1] - internal.n_T[shared->dim_n_T_1 * (j - 1) + i - 1]), 1 - std::exp(shared->D[j - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_Tx_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Tx_2; ++j) {
        internal.n_Tx[i - 1 + shared->dim_n_Tx_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_T[shared->dim_n_T_1 * (j - 1) + i - 1]), shared->exr / (real_t) shared->r_T[shared->dim_r_T_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_Ux_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Ux_2; ++j) {
        internal.n_Ux[i - 1 + shared->dim_n_Ux_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_U[shared->dim_n_U_1 * (j - 1) + i - 1]), shared->exr / (real_t) internal.r_U[shared->dim_r_U_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_lambda; ++i) {
      state_next[shared->offset_variable_lambda + i - 1] = shared->p[i - 1] * beta * (shared->epsilon * internal.prop_C[i - 1] + (1 - shared->epsilon) * odin_sum1<real_t>(internal.foi_LH.data(), 0, shared->dim_foi_LH));
    }
    for (int i = 1; i <= shared->dim_wI_1; ++i) {
      for (int j = 1; j <= shared->dim_wI_2; ++j) {
        for (int k = 1; k <= shared->dim_wI_3; ++k) {
          internal.wI[i - 1 + shared->dim_wI_1 * (j - 1) + shared->dim_wI_12 * (k - 1)] = internal.n_Iw[shared->dim_n_Iw_1 * (k - 1) + i - 1] * shared->w[shared->dim_w_1 * (k - 1) + j - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_AT_1; ++i) {
      for (int j = 1; j <= shared->dim_n_AT_2; ++j) {
        internal.n_AT[i - 1 + shared->dim_n_AT_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_A[shared->dim_n_A_1 * (j - 1) + i - 1] - internal.n_Ax[shared->dim_n_Ax_1 * (j - 1) + i - 1]), internal.r_AT[shared->dim_r_AT_1 * (j - 1) + i - 1] / (real_t) (internal.r_AT[shared->dim_r_AT_1 * (j - 1) + i - 1] + shared->r_AU[shared->dim_r_AU_1 * (j - 1) + i - 1]));
      }
    }
    for (int i = 1; i <= shared->dim_n_IA_1; ++i) {
      for (int j = 1; j <= shared->dim_n_IA_2; ++j) {
        internal.n_IA[i - 1 + shared->dim_n_IA_1 * (j - 1)] = internal.n_I[shared->dim_n_I_1 * (j - 1) + i - 1] - internal.n_Ix[shared->dim_n_Ix_1 * (j - 1) + i - 1] - internal.n_IS[shared->dim_n_IS_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_n_ST_1; ++i) {
      for (int j = 1; j <= shared->dim_n_ST_2; ++j) {
        internal.n_ST[i - 1 + shared->dim_n_ST_1 * (j - 1)] = internal.n_S[shared->dim_n_S_1 * (j - 1) + i - 1] - internal.n_Sx[shared->dim_n_Sx_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_n_TU_1; ++i) {
      for (int j = 1; j <= shared->dim_n_TU_2; ++j) {
        internal.n_TU[i - 1 + shared->dim_n_TU_1 * (j - 1)] = internal.n_T[shared->dim_n_T_1 * (j - 1) + i - 1] - internal.n_Tx[shared->dim_n_Tx_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_n_UI_1; ++i) {
      for (int j = 1; j <= shared->dim_n_UI_2; ++j) {
        internal.n_UI[i - 1 + shared->dim_n_UI_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_U[shared->dim_n_U_1 * (j - 1) + i - 1] - internal.n_Ux[shared->dim_n_Ux_1 * (j - 1) + i - 1]), internal.r_UI[shared->dim_r_UI_1 * (j - 1) + i - 1] / (real_t) (internal.r_UI[shared->dim_r_UI_1 * (j - 1) + i - 1] + internal.r_UU[shared->dim_r_UU_1 * (j - 1) + i - 1]));
      }
    }
    for (int i = 1; i <= shared->dim_n_x; ++i) {
      internal.n_x[i - 1] = odin_sum2<real_t>(internal.n_Ux.data(), i - 1, i, 0, shared->dim_n_Ux_2, shared->dim_n_Ux_1) + odin_sum2<real_t>(internal.n_Ix.data(), i - 1, i, 0, shared->dim_n_Ix_2, shared->dim_n_Ix_1) + odin_sum2<real_t>(internal.n_Ax.data(), i - 1, i, 0, shared->dim_n_Ax_2, shared->dim_n_Ax_1) + odin_sum2<real_t>(internal.n_Sx.data(), i - 1, i, 0, shared->dim_n_Sx_2, shared->dim_n_Sx_1) + odin_sum2<real_t>(internal.n_Tx.data(), i - 1, i, 0, shared->dim_n_Tx_2, shared->dim_n_Tx_1);
    }
    for (int i = 1; i <= shared->dim_wA_1; ++i) {
      for (int j = 1; j <= shared->dim_wA_2; ++j) {
        for (int k = 1; k <= shared->dim_wA_3; ++k) {
          internal.wA[i - 1 + shared->dim_wA_1 * (j - 1) + shared->dim_wA_12 * (k - 1)] = internal.n_Aw[shared->dim_n_Aw_1 * (k - 1) + i - 1] * shared->w[shared->dim_w_1 * (k - 1) + j - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_wS_1; ++i) {
      for (int j = 1; j <= shared->dim_wS_2; ++j) {
        for (int k = 1; k <= shared->dim_wS_3; ++k) {
          internal.wS[i - 1 + shared->dim_wS_1 * (j - 1) + shared->dim_wS_12 * (k - 1)] = internal.n_Sw[shared->dim_n_Sw_1 * (k - 1) + i - 1] * shared->w[shared->dim_w_1 * (k - 1) + j - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_wT_1; ++i) {
      for (int j = 1; j <= shared->dim_wT_2; ++j) {
        for (int k = 1; k <= shared->dim_wT_3; ++k) {
          internal.wT[i - 1 + shared->dim_wT_1 * (j - 1) + shared->dim_wT_12 * (k - 1)] = internal.n_Tw[shared->dim_n_Tw_1 * (k - 1) + i - 1] * shared->w[shared->dim_w_1 * (k - 1) + j - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_AU_1; ++i) {
      for (int j = 1; j <= shared->dim_n_AU_2; ++j) {
        internal.n_AU[i - 1 + shared->dim_n_AU_1 * (j - 1)] = internal.n_A[shared->dim_n_A_1 * (j - 1) + i - 1] - internal.n_Ax[shared->dim_n_Ax_1 * (j - 1) + i - 1] - internal.n_AT[shared->dim_n_AT_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_n_UU_1; ++i) {
      for (int j = 1; j <= shared->dim_n_UU_2; ++j) {
        internal.n_UU[i - 1 + shared->dim_n_UU_1 * (j - 1)] = internal.n_U[shared->dim_n_U_1 * (j - 1) + i - 1] - internal.n_Ux[shared->dim_n_Ux_1 * (j - 1) + i - 1] - internal.n_UI[shared->dim_n_UI_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_n_Uw_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Uw_2; ++j) {
        internal.n_Uw[i - 1 + shared->dim_n_Uw_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(U[shared->dim_U_1 * (j - 1) + i - 1] - internal.n_UI[shared->dim_n_UI_1 * (j - 1) + i - 1] - internal.n_Ux[shared->dim_n_Ux_1 * (j - 1) + i - 1]), 1 - std::exp(shared->D[j - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_vod_1; ++i) {
      for (int j = 1; j <= shared->dim_n_vod_2; ++j) {
        internal.n_vod[i - 1 + shared->dim_n_vod_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_TU[shared->dim_n_TU_1 * (j - 1) + i - 1]), shared->u_vod[shared->dim_u_vod_1 * (j - 1) + i - 1] * vax_switch);
      }
    }
    for (int i = 1; i <= shared->dim_n_xU_1; ++i) {
      int j = 1;
      internal.n_xU[i - 1 + shared->dim_n_xU_1 * (j - 1)] = (shared->fix_pop == 0 ? dust::distr::rpois(rng_state, shared->enr * shared->q[i - 1] * shared->dt) : internal.n_x[i - 1]);
    }
    for (int i = 1; i <= shared->dim_A_1; ++i) {
      for (int j = 1; j <= shared->dim_A_2; ++j) {
        state_next[shared->offset_variable_A + i - 1 + shared->dim_A_1 * (j - 1)] = A[shared->dim_A_1 * (j - 1) + i - 1] + internal.n_IA[shared->dim_n_IA_1 * (j - 1) + i - 1] - internal.n_A[shared->dim_n_A_1 * (j - 1) + i - 1] + odin_sum3<real_t>(internal.wA.data(), i - 1, i, j - 1, j, 0, shared->dim_wA_3, shared->dim_wA_1, shared->dim_wA_12);
      }
    }
    for (int i = 1; i <= shared->dim_cum_diag_a_1; ++i) {
      for (int j = 1; j <= shared->dim_cum_diag_a_2; ++j) {
        state_next[shared->offset_variable_cum_diag_a + i - 1 + shared->dim_cum_diag_a_1 * (j - 1)] = cum_diag_a[shared->dim_cum_diag_a_1 * (j - 1) + i - 1] + internal.n_AT[shared->dim_n_AT_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_cum_diag_s_1; ++i) {
      for (int j = 1; j <= shared->dim_cum_diag_s_2; ++j) {
        state_next[shared->offset_variable_cum_diag_s + i - 1 + shared->dim_cum_diag_s_1 * (j - 1)] = cum_diag_s[shared->dim_cum_diag_s_1 * (j - 1) + i - 1] + internal.n_ST[shared->dim_n_ST_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_cum_incid_1; ++i) {
      for (int j = 1; j <= shared->dim_cum_incid_2; ++j) {
        state_next[shared->offset_variable_cum_incid + i - 1 + shared->dim_cum_incid_1 * (j - 1)] = cum_incid[shared->dim_cum_incid_1 * (j - 1) + i - 1] + internal.n_UI[shared->dim_n_UI_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_cum_treated_1; ++i) {
      for (int j = 1; j <= shared->dim_cum_treated_2; ++j) {
        state_next[shared->offset_variable_cum_treated + i - 1 + shared->dim_cum_treated_1 * (j - 1)] = cum_treated[shared->dim_cum_treated_1 * (j - 1) + i - 1] + internal.n_TU[shared->dim_n_TU_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_diag_a_1; ++i) {
      for (int j = 1; j <= shared->dim_diag_a_2; ++j) {
        state_next[shared->offset_variable_diag_a + i - 1 + shared->dim_diag_a_1 * (j - 1)] = (fmodr<real_t>(step, shared->steps_per_year) == 0 ? internal.n_AT[shared->dim_n_AT_1 * (j - 1) + i - 1] : diag_a[shared->dim_diag_a_1 * (j - 1) + i - 1] + internal.n_AT[shared->dim_n_AT_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_diag_s_1; ++i) {
      for (int j = 1; j <= shared->dim_diag_s_2; ++j) {
        state_next[shared->offset_variable_diag_s + i - 1 + shared->dim_diag_s_1 * (j - 1)] = (fmodr<real_t>(step, shared->steps_per_year) == 0 ? internal.n_ST[shared->dim_n_ST_1 * (j - 1) + i - 1] : diag_s[shared->dim_diag_s_1 * (j - 1) + i - 1] + internal.n_ST[shared->dim_n_ST_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_I_1; ++i) {
      for (int j = 1; j <= shared->dim_I_2; ++j) {
        state_next[shared->offset_variable_I + i - 1 + shared->dim_I_1 * (j - 1)] = I[shared->dim_I_1 * (j - 1) + i - 1] + internal.n_UI[shared->dim_n_UI_1 * (j - 1) + i - 1] - internal.n_I[shared->dim_n_I_1 * (j - 1) + i - 1] + odin_sum3<real_t>(internal.wI.data(), i - 1, i, j - 1, j, 0, shared->dim_wI_3, shared->dim_wI_1, shared->dim_wI_12);
      }
    }
    for (int i = 1; i <= shared->dim_incid_1; ++i) {
      for (int j = 1; j <= shared->dim_incid_2; ++j) {
        state_next[shared->offset_variable_incid + i - 1 + shared->dim_incid_1 * (j - 1)] = (fmodr<real_t>(step, shared->steps_per_year) == 0 ? internal.n_UI[shared->dim_n_UI_1 * (j - 1) + i - 1] : incid[shared->dim_incid_1 * (j - 1) + i - 1] + internal.n_UI[shared->dim_n_UI_1 * (j - 1) + i - 1]);
      }
    }
    state_next[2] = (fmodr<real_t>(step, shared->steps_per_year) == 0 ? odin_sum1<real_t>(internal.n_x.data(), 0, shared->dim_n_x) : leavers + odin_sum1<real_t>(internal.n_x.data(), 0, shared->dim_n_x));
    for (int i = 1; i <= shared->dim_S_1; ++i) {
      for (int j = 1; j <= shared->dim_S_2; ++j) {
        state_next[shared->offset_variable_S + i - 1 + shared->dim_S_1 * (j - 1)] = S[shared->dim_S_1 * (j - 1) + i - 1] + internal.n_IS[shared->dim_n_IS_1 * (j - 1) + i - 1] - internal.n_S[shared->dim_n_S_1 * (j - 1) + i - 1] + odin_sum3<real_t>(internal.wS.data(), i - 1, i, j - 1, j, 0, shared->dim_wS_3, shared->dim_wS_1, shared->dim_wS_12);
      }
    }
    for (int i = 1; i <= shared->dim_T_1; ++i) {
      for (int j = 1; j <= shared->dim_T_2; ++j) {
        state_next[shared->offset_variable_T + i - 1 + shared->dim_T_1 * (j - 1)] = T[shared->dim_T_1 * (j - 1) + i - 1] + internal.n_ST[shared->dim_n_ST_1 * (j - 1) + i - 1] + internal.n_AT[shared->dim_n_AT_1 * (j - 1) + i - 1] - internal.n_T[shared->dim_n_T_1 * (j - 1) + i - 1] + odin_sum3<real_t>(internal.wT.data(), i - 1, i, j - 1, j, 0, shared->dim_wT_3, shared->dim_wT_1, shared->dim_wT_12);
      }
    }
    for (int i = 1; i <= shared->dim_treated_1; ++i) {
      for (int j = 1; j <= shared->dim_treated_2; ++j) {
        state_next[shared->offset_variable_treated + i - 1 + shared->dim_treated_1 * (j - 1)] = (fmodr<real_t>(step, shared->steps_per_year) == 0 ? internal.n_TU[shared->dim_n_TU_1 * (j - 1) + i - 1] : treated[shared->dim_treated_1 * (j - 1) + i - 1] + internal.n_TU[shared->dim_n_TU_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_vbe_1; ++i) {
      for (int j = 1; j <= shared->dim_n_vbe_2; ++j) {
        internal.n_vbe[i - 1 + shared->dim_n_vbe_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_xU[shared->dim_n_xU_1 * (j - 1) + i - 1]), shared->u_vbe[shared->dim_u_vbe_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_vos_1; ++i) {
      for (int j = 1; j <= shared->dim_n_vos_2; ++j) {
        internal.n_vos[i - 1 + shared->dim_n_vos_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_UU[shared->dim_n_UU_1 * (j - 1) + i - 1]), shared->u_vos[shared->dim_u_vos_1 * (j - 1) + i - 1] * vax_switch);
      }
    }
    for (int i = 1; i <= shared->dim_cum_screened_1; ++i) {
      for (int j = 1; j <= shared->dim_cum_screened_2; ++j) {
        state_next[shared->offset_variable_cum_screened + i - 1 + shared->dim_cum_screened_1 * (j - 1)] = cum_screened[shared->dim_cum_screened_1 * (j - 1) + i - 1] + internal.n_UU[shared->dim_n_UU_1 * (j - 1) + i - 1];
      }
    }
    state_next[1] = (fmodr<real_t>(step, shared->steps_per_year) == 0 ? odin_sum1<real_t>(internal.n_xU.data(), 0, shared->dim_n_xU) : entrants + odin_sum1<real_t>(internal.n_xU.data(), 0, shared->dim_n_xU));
    for (int i = 1; i <= shared->dim_screened_1; ++i) {
      for (int j = 1; j <= shared->dim_screened_2; ++j) {
        state_next[shared->offset_variable_screened + i - 1 + shared->dim_screened_1 * (j - 1)] = (fmodr<real_t>(step, shared->steps_per_year) == 0 ? internal.n_UU[shared->dim_n_UU_1 * (j - 1) + i - 1] : screened[shared->dim_screened_1 * (j - 1) + i - 1] + internal.n_UU[shared->dim_n_UU_1 * (j - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_wU_1; ++i) {
      for (int j = 1; j <= shared->dim_wU_2; ++j) {
        for (int k = 1; k <= shared->dim_wU_3; ++k) {
          internal.wU[i - 1 + shared->dim_wU_1 * (j - 1) + shared->dim_wU_12 * (k - 1)] = internal.n_Uw[shared->dim_n_Uw_1 * (k - 1) + i - 1] * shared->w[shared->dim_w_1 * (k - 1) + j - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_v_1; ++i) {
      for (int j = 1; j <= shared->dim_n_v_2; ++j) {
        for (int k = 1; k <= shared->dim_n_v_3; ++k) {
          internal.n_v[i - 1 + shared->dim_n_v_1 * (j - 1) + shared->dim_n_v_12 * (k - 1)] = internal.n_vos[shared->dim_n_vos_1 * (k - 1) + i - 1] * shared->vos[shared->dim_vos_12 * (k - 1) + shared->dim_vos_1 * (j - 1) + i - 1] + internal.n_vod[shared->dim_n_vod_1 * (k - 1) + i - 1] * shared->vod[shared->dim_vod_12 * (k - 1) + shared->dim_vod_1 * (j - 1) + i - 1] + internal.n_vbe[shared->dim_n_vbe_1 * (k - 1) + i - 1] * shared->vbe[shared->dim_vbe_12 * (k - 1) + shared->dim_vbe_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_cum_vaccinated_1; ++i) {
      for (int j = 1; j <= shared->dim_cum_vaccinated_2; ++j) {
        state_next[shared->offset_variable_cum_vaccinated + i - 1 + shared->dim_cum_vaccinated_1 * (j - 1)] = cum_vaccinated[shared->dim_cum_vaccinated_1 * (j - 1) + i - 1] + internal.n_v[shared->dim_n_v_12 * (j - 1) + shared->dim_n_v_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_U_1; ++i) {
      for (int j = 1; j <= shared->dim_U_2; ++j) {
        state_next[shared->offset_variable_U + i - 1 + shared->dim_U_1 * (j - 1)] = U[shared->dim_U_1 * (j - 1) + i - 1] + internal.n_xU[shared->dim_n_xU_1 * (j - 1) + i - 1] - internal.n_UI[shared->dim_n_UI_1 * (j - 1) + i - 1] - internal.n_Ux[shared->dim_n_Ux_1 * (j - 1) + i - 1] + internal.n_AU[shared->dim_n_AU_1 * (j - 1) + i - 1] + internal.n_TU[shared->dim_n_TU_1 * (j - 1) + i - 1] + odin_sum3<real_t>(internal.wU.data(), i - 1, i, j - 1, j, 0, shared->dim_wU_3, shared->dim_wU_1, shared->dim_wU_12) - odin_sum3<real_t>(internal.n_v.data(), i - 1, i, j - 1, j, 0, shared->dim_n_v_3, shared->dim_n_v_1, shared->dim_n_v_12);
      }
    }
    for (int i = 1; i <= shared->dim_vaccinated_1; ++i) {
      for (int j = 1; j <= shared->dim_vaccinated_2; ++j) {
        state_next[shared->offset_variable_vaccinated + i - 1 + shared->dim_vaccinated_1 * (j - 1)] = (fmodr<real_t>(step, shared->steps_per_year) == 0 ? internal.n_v[shared->dim_n_v_12 * (j - 1) + shared->dim_n_v_1 * (j - 1) + i - 1] : vaccinated[shared->dim_vaccinated_1 * (j - 1) + i - 1] + internal.n_v[shared->dim_n_v_12 * (j - 1) + shared->dim_n_v_1 * (j - 1) + i - 1]);
      }
    }
  }
private:
  std::shared_ptr<const shared_t> shared;
  internal_t internal;
};
template <typename real_t, typename container>
HOSTDEVICE real_t odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1) {
  real_t tot = 0.0;
  for (int j = from_j; j < to_j; ++j) {
    int jj = j * dim_x_1;
    for (int i = from_i; i < to_i; ++i) {
      tot += x[i + jj];
    }
  }
  return tot;
}
template <typename real_t, typename container>
HOSTDEVICE real_t odin_sum3(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int dim_x_1, int dim_x_12) {
  real_t tot = 0.0;
  for (int k = from_k; k < to_k; ++k) {
    int kk = k * dim_x_12;
    for (int j = from_j; j < to_j; ++j) {
      int jj = j * dim_x_1 + kk;
      for (int i = from_i; i < to_i; ++i) {
        tot += x[i + jj];
      }
    }
  }
  return tot;
}
#include <array>
#include <cpp11/R.hpp>
#include <cpp11/sexp.hpp>
#include <cpp11/doubles.hpp>
#include <cpp11/integers.hpp>
#include <cpp11/list.hpp>
#include <cpp11/strings.hpp>
#include <memory>
#include <vector>

template <typename T>
inline bool is_na(T x);

template <>
inline bool is_na(int x) {
  return x == NA_INTEGER;
}

template <>
inline bool is_na(double x) {
  return ISNA(x);
}

inline size_t object_length(cpp11::sexp x) {
  return ::Rf_xlength(x);
}

template <typename T>
void user_check_value(T value, const char *name, T min, T max) {
  if (is_na(value)) {
    cpp11::stop("'%s' must not be NA", name);
  }
  if (!is_na(min) && value < min) {
    cpp11::stop("Expected '%s' to be at least %g", name, (double) min);
  }
  if (!is_na(max) && value > max) {
    cpp11::stop("Expected '%s' to be at most %g", name, (double) max);
  }
}

template <typename T>
void user_check_array_value(const std::vector<T>& value, const char *name,
                            T min, T max) {
  for (auto& x : value) {
    user_check_value(x, name, min, max);
  }
}

inline size_t user_get_array_rank(cpp11::sexp x) {
  if (!::Rf_isArray(x)) {
    return 1;
  } else {
    cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
    return dim.size();
  }
}

template <size_t N>
void user_check_array_rank(cpp11::sexp x, const char *name) {
  size_t rank = user_get_array_rank(x);
  if (rank != N) {
    if (N == 1) {
      cpp11::stop("Expected a vector for '%s'", name);
    } else if (N == 2) {
      cpp11::stop("Expected a matrix for '%s'", name);
    } else {
      cpp11::stop("Expected an array of rank %d for '%s'", N, name);
    }
  }
}

template <size_t N>
void user_check_array_dim(cpp11::sexp x, const char *name,
                          const std::array<int, N>& dim_expected) {
  cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  for (size_t i = 0; i < N; ++i) {
    if (dim[(int)i] != dim_expected[i]) {
      Rf_error("Incorrect size of dimension %d of '%s' (expected %d)",
               i + 1, name, dim_expected[i]);
    }
  }
}

template <>
inline void user_check_array_dim<1>(cpp11::sexp x, const char *name,
                                    const std::array<int, 1>& dim_expected) {
  if ((int)object_length(x) != dim_expected[0]) {
    cpp11::stop("Expected length %d value for '%s'", dim_expected[0], name);
  }
}

template <size_t N>
void user_set_array_dim(cpp11::sexp x, const char *name,
                        std::array<int, N>& dim) {
  cpp11::integers dim_given = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  std::copy(dim_given.begin(), dim_given.end(), dim.begin());
}

template <>
inline void user_set_array_dim<1>(cpp11::sexp x, const char *name,
                                  std::array<int, 1>& dim) {
  dim[0] = object_length(x);
}

template <typename T>
T user_get_scalar(cpp11::list user, const char *name,
                  const T previous, T min, T max) {
  T ret = previous;
  cpp11::sexp x = user[name];
  if (x != R_NilValue) {
    if (object_length(x) != 1) {
      cpp11::stop("Expected a scalar numeric for '%s'", name);
    }
    // TODO: when we're getting out an integer this is a bit too relaxed
    if (TYPEOF(x) == REALSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else if (TYPEOF(x) == INTSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else {
      cpp11::stop("Expected a numeric value for %s", name);
    }
  }

  if (is_na(ret)) {
    cpp11::stop("Expected a value for '%s'", name);
  }
  user_check_value<T>(ret, name, min, max);
  return ret;
}

template <>
inline float user_get_scalar<float>(cpp11::list user, const char *name,
                                    const float previous, float min, float max) {
  double value = user_get_scalar<double>(user, name, previous, min, max);
  return static_cast<float>(value);
}

template <typename T>
std::vector<T> user_get_array_value(cpp11::sexp x, const char * name,
                                    T min, T max) {
  std::vector<T> ret = cpp11::as_cpp<std::vector<T>>(x);
  user_check_array_value<T>(ret, name, min, max);
  return ret;
}

template <typename T, size_t N>
std::vector<T> user_get_array_fixed(cpp11::list user, const char *name,
                                    const std::vector<T> previous,
                                    const std::array<int, N>& dim,
                                    T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_check_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <typename T, size_t N>
std::vector<T> user_get_array_variable(cpp11::list user, const char *name,
                                       std::vector<T> previous,
                                       std::array<int, N>& dim,
                                       T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_set_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <>
inline std::vector<float> user_get_array_value(cpp11::sexp x, const char * name,
                                               float min, float max) {
  // NOTE: possible under/overflow here for min/max because we've
  // downcast this.
  std::vector<double> value = user_get_array_value<double>(x, name, min, max);
  std::vector<float> ret(value.size());
  std::copy(value.begin(), value.end(), ret.begin());
  return ret;
}

// This is sum with inclusive "from", exclusive "to", following the
// same function in odin
template <typename real_t, typename container>
HOSTDEVICE real_t odin_sum1(const container x, size_t from, size_t to) {
  real_t tot = 0.0;
  for (size_t i = from; i < to; ++i) {
    tot += x[i];
  }
  return tot;
}

inline cpp11::writable::integers integer_sequence(size_t from, size_t len) {
  cpp11::writable::integers ret(len);
  int* data = INTEGER(ret);
  for (size_t i = 0, j = from; i < len; ++i, ++j) {
    data[i] = j;
  }
  return ret;
}
namespace dust {
template<>
dust::pars_t<model> dust_pars<model>(cpp11::list user) {
  typedef typename model::real_t real_t;
  auto shared = std::make_shared<model::shared_t>();
  model::internal_t internal;
  shared->initial_beta = 0;
  shared->initial_entrants = 0;
  shared->initial_leavers = 0;
  shared->initial_time = 0;
  shared->n_group = 2;
  shared->steps_per_year = 365;
  shared->dim_eta = shared->n_group;
  shared->dim_foi_LH = shared->n_group;
  shared->dim_lambda = shared->n_group;
  shared->dim_n_x = shared->n_group;
  shared->dim_Np = shared->n_group;
  shared->dim_p = shared->n_group;
  shared->dim_prop_C = shared->n_group;
  shared->dim_q = shared->n_group;
  shared->dt = 1 / (real_t) shared->steps_per_year;
  internal.foi_LH = std::vector<real_t>(shared->dim_foi_LH);
  shared->initial_eta = std::vector<real_t>(shared->dim_eta);
  shared->initial_lambda = std::vector<real_t>(shared->dim_lambda);
  internal.n_x = std::vector<real_t>(shared->dim_n_x);
  internal.Np = std::vector<real_t>(shared->dim_Np);
  internal.prop_C = std::vector<real_t>(shared->dim_prop_C);
  for (int i = 1; i <= shared->dim_eta; ++i) {
    shared->initial_eta[i - 1] = 0;
  }
  for (int i = 1; i <= shared->dim_lambda; ++i) {
    shared->initial_lambda[i - 1] = 0;
  }
  shared->offset_variable_lambda = shared->dim_eta + 4;
  shared->offset_variable_U = shared->dim_eta + shared->dim_lambda + 4;
  shared->enr = NA_REAL;
  shared->epsilon = NA_REAL;
  shared->exr = NA_REAL;
  shared->fix_pop = NA_REAL;
  shared->mu = NA_REAL;
  shared->nu = NA_REAL;
  shared->psi = NA_REAL;
  shared->rho = NA_REAL;
  shared->sigma = NA_REAL;
  shared->n_vax = 1;
  std::array <int, 1> dim_beta_step;
  shared->beta_step = user_get_array_variable<real_t, 1>(user, "beta_step", shared->beta_step, dim_beta_step, NA_REAL, NA_REAL);
  shared->dim_beta_step = shared->beta_step.size();
  shared->enr = user_get_scalar<real_t>(user, "enr", shared->enr, NA_REAL, NA_REAL);
  shared->epsilon = user_get_scalar<real_t>(user, "epsilon", shared->epsilon, NA_REAL, NA_REAL);
  std::array <int, 1> dim_eta_h_step;
  shared->eta_h_step = user_get_array_variable<real_t, 1>(user, "eta_h_step", shared->eta_h_step, dim_eta_h_step, NA_REAL, NA_REAL);
  shared->dim_eta_h_step = shared->eta_h_step.size();
  std::array <int, 1> dim_eta_l_step;
  shared->eta_l_step = user_get_array_variable<real_t, 1>(user, "eta_l_step", shared->eta_l_step, dim_eta_l_step, NA_REAL, NA_REAL);
  shared->dim_eta_l_step = shared->eta_l_step.size();
  shared->exr = user_get_scalar<real_t>(user, "exr", shared->exr, NA_REAL, NA_REAL);
  shared->fix_pop = user_get_scalar<real_t>(user, "fix_pop", shared->fix_pop, NA_REAL, NA_REAL);
  shared->mu = user_get_scalar<real_t>(user, "mu", shared->mu, NA_REAL, NA_REAL);
  shared->n_vax = user_get_scalar<int>(user, "n_vax", shared->n_vax, NA_REAL, NA_REAL);
  shared->nu = user_get_scalar<real_t>(user, "nu", shared->nu, NA_REAL, NA_REAL);
  shared->psi = user_get_scalar<real_t>(user, "psi", shared->psi, NA_REAL, NA_REAL);
  shared->rho = user_get_scalar<real_t>(user, "rho", shared->rho, NA_REAL, NA_REAL);
  shared->sigma = user_get_scalar<real_t>(user, "sigma", shared->sigma, NA_REAL, NA_REAL);
  std::array <int, 1> dim_vax_step;
  shared->vax_step = user_get_array_variable<real_t, 1>(user, "vax_step", shared->vax_step, dim_vax_step, NA_REAL, NA_REAL);
  shared->dim_vax_step = shared->vax_step.size();
  shared->dim_A_1 = shared->n_group;
  shared->dim_A_2 = shared->n_vax;
  shared->dim_A0_1 = shared->n_group;
  shared->dim_A0_2 = shared->n_vax;
  shared->dim_C_1 = shared->n_group;
  shared->dim_C_2 = shared->n_vax;
  shared->dim_cum_diag_a_1 = shared->n_group;
  shared->dim_cum_diag_a_2 = shared->n_vax;
  shared->dim_cum_diag_s_1 = shared->n_group;
  shared->dim_cum_diag_s_2 = shared->n_vax;
  shared->dim_cum_incid_1 = shared->n_group;
  shared->dim_cum_incid_2 = shared->n_vax;
  shared->dim_cum_screened_1 = shared->n_group;
  shared->dim_cum_screened_2 = shared->n_vax;
  shared->dim_cum_treated_1 = shared->n_group;
  shared->dim_cum_treated_2 = shared->n_vax;
  shared->dim_cum_vaccinated_1 = shared->n_group;
  shared->dim_cum_vaccinated_2 = shared->n_vax;
  shared->dim_D = shared->n_vax;
  shared->dim_diag_a_1 = shared->n_group;
  shared->dim_diag_a_2 = shared->n_vax;
  shared->dim_diag_s_1 = shared->n_group;
  shared->dim_diag_s_2 = shared->n_vax;
  shared->dim_I_1 = shared->n_group;
  shared->dim_I_2 = shared->n_vax;
  shared->dim_I0_1 = shared->n_group;
  shared->dim_I0_2 = shared->n_vax;
  shared->dim_incid_1 = shared->n_group;
  shared->dim_incid_2 = shared->n_vax;
  shared->dim_N_1 = shared->n_group;
  shared->dim_N_2 = shared->n_vax;
  shared->dim_n_A_1 = shared->n_group;
  shared->dim_n_A_2 = shared->n_vax;
  shared->dim_n_AT_1 = shared->n_group;
  shared->dim_n_AT_2 = shared->n_vax;
  shared->dim_n_AU_1 = shared->n_group;
  shared->dim_n_AU_2 = shared->n_vax;
  shared->dim_n_Aw_1 = shared->n_group;
  shared->dim_n_Aw_2 = shared->n_vax;
  shared->dim_n_Ax_1 = shared->n_group;
  shared->dim_n_Ax_2 = shared->n_vax;
  shared->dim_n_I_1 = shared->n_group;
  shared->dim_n_I_2 = shared->n_vax;
  shared->dim_n_IA_1 = shared->n_group;
  shared->dim_n_IA_2 = shared->n_vax;
  shared->dim_n_IS_1 = shared->n_group;
  shared->dim_n_IS_2 = shared->n_vax;
  shared->dim_n_Iw_1 = shared->n_group;
  shared->dim_n_Iw_2 = shared->n_vax;
  shared->dim_n_Ix_1 = shared->n_group;
  shared->dim_n_Ix_2 = shared->n_vax;
  shared->dim_n_S_1 = shared->n_group;
  shared->dim_n_S_2 = shared->n_vax;
  shared->dim_n_ST_1 = shared->n_group;
  shared->dim_n_ST_2 = shared->n_vax;
  shared->dim_n_Sw_1 = shared->n_group;
  shared->dim_n_Sw_2 = shared->n_vax;
  shared->dim_n_Sx_1 = shared->n_group;
  shared->dim_n_Sx_2 = shared->n_vax;
  shared->dim_n_T_1 = shared->n_group;
  shared->dim_n_T_2 = shared->n_vax;
  shared->dim_n_TU_1 = shared->n_group;
  shared->dim_n_TU_2 = shared->n_vax;
  shared->dim_n_Tw_1 = shared->n_group;
  shared->dim_n_Tw_2 = shared->n_vax;
  shared->dim_n_Tx_1 = shared->n_group;
  shared->dim_n_Tx_2 = shared->n_vax;
  shared->dim_n_U_1 = shared->n_group;
  shared->dim_n_U_2 = shared->n_vax;
  shared->dim_n_UI_1 = shared->n_group;
  shared->dim_n_UI_2 = shared->n_vax;
  shared->dim_n_UU_1 = shared->n_group;
  shared->dim_n_UU_2 = shared->n_vax;
  shared->dim_n_Uw_1 = shared->n_group;
  shared->dim_n_Uw_2 = shared->n_vax;
  shared->dim_n_Ux_1 = shared->n_group;
  shared->dim_n_Ux_2 = shared->n_vax;
  shared->dim_n_v_1 = shared->n_group;
  shared->dim_n_v_2 = shared->n_vax;
  shared->dim_n_v_3 = shared->n_vax;
  shared->dim_n_vbe_1 = shared->n_group;
  shared->dim_n_vbe_2 = shared->n_vax;
  shared->dim_n_vod_1 = shared->n_group;
  shared->dim_n_vod_2 = shared->n_vax;
  shared->dim_n_vos_1 = shared->n_group;
  shared->dim_n_vos_2 = shared->n_vax;
  shared->dim_n_xU_1 = shared->n_group;
  shared->dim_n_xU_2 = shared->n_vax;
  shared->dim_r_A_1 = shared->n_group;
  shared->dim_r_A_2 = shared->n_vax;
  shared->dim_r_AT_1 = shared->n_group;
  shared->dim_r_AT_2 = shared->n_vax;
  shared->dim_r_AU_1 = shared->n_group;
  shared->dim_r_AU_2 = shared->n_vax;
  shared->dim_r_I_1 = shared->n_group;
  shared->dim_r_I_2 = shared->n_vax;
  shared->dim_r_S_1 = shared->n_group;
  shared->dim_r_S_2 = shared->n_vax;
  shared->dim_r_ST_1 = shared->n_group;
  shared->dim_r_ST_2 = shared->n_vax;
  shared->dim_r_T_1 = shared->n_group;
  shared->dim_r_T_2 = shared->n_vax;
  shared->dim_r_TU_1 = shared->n_group;
  shared->dim_r_TU_2 = shared->n_vax;
  shared->dim_r_U_1 = shared->n_group;
  shared->dim_r_U_2 = shared->n_vax;
  shared->dim_r_UI_1 = shared->n_group;
  shared->dim_r_UI_2 = shared->n_vax;
  shared->dim_r_UU_1 = shared->n_group;
  shared->dim_r_UU_2 = shared->n_vax;
  shared->dim_S_1 = shared->n_group;
  shared->dim_S_2 = shared->n_vax;
  shared->dim_S0_1 = shared->n_group;
  shared->dim_S0_2 = shared->n_vax;
  shared->dim_screened_1 = shared->n_group;
  shared->dim_screened_2 = shared->n_vax;
  shared->dim_T_1 = shared->n_group;
  shared->dim_T_2 = shared->n_vax;
  shared->dim_T0_1 = shared->n_group;
  shared->dim_T0_2 = shared->n_vax;
  shared->dim_treated_1 = shared->n_group;
  shared->dim_treated_2 = shared->n_vax;
  shared->dim_U_1 = shared->n_group;
  shared->dim_U_2 = shared->n_vax;
  shared->dim_u_vbe_1 = shared->n_group;
  shared->dim_u_vbe_2 = shared->n_vax;
  shared->dim_u_vod_1 = shared->n_group;
  shared->dim_u_vod_2 = shared->n_vax;
  shared->dim_u_vos_1 = shared->n_group;
  shared->dim_u_vos_2 = shared->n_vax;
  shared->dim_U0_1 = shared->n_group;
  shared->dim_U0_2 = shared->n_vax;
  shared->dim_vaccinated_1 = shared->n_group;
  shared->dim_vaccinated_2 = shared->n_vax;
  shared->dim_vbe_1 = shared->n_group;
  shared->dim_vbe_2 = shared->n_vax;
  shared->dim_vbe_3 = shared->n_vax;
  shared->dim_vea = shared->n_vax;
  shared->dim_ved = shared->n_vax;
  shared->dim_vei = shared->n_vax;
  shared->dim_ves = shared->n_vax;
  shared->dim_vod_1 = shared->n_group;
  shared->dim_vod_2 = shared->n_vax;
  shared->dim_vod_3 = shared->n_vax;
  shared->dim_vos_1 = shared->n_group;
  shared->dim_vos_2 = shared->n_vax;
  shared->dim_vos_3 = shared->n_vax;
  shared->dim_w_1 = shared->n_vax;
  shared->dim_w_2 = shared->n_vax;
  shared->dim_wA_1 = shared->n_group;
  shared->dim_wA_2 = shared->n_vax;
  shared->dim_wA_3 = shared->n_vax;
  shared->dim_wI_1 = shared->n_group;
  shared->dim_wI_2 = shared->n_vax;
  shared->dim_wI_3 = shared->n_vax;
  shared->dim_wS_1 = shared->n_group;
  shared->dim_wS_2 = shared->n_vax;
  shared->dim_wS_3 = shared->n_vax;
  shared->dim_wT_1 = shared->n_group;
  shared->dim_wT_2 = shared->n_vax;
  shared->dim_wT_3 = shared->n_vax;
  shared->dim_wU_1 = shared->n_group;
  shared->dim_wU_2 = shared->n_vax;
  shared->dim_wU_3 = shared->n_vax;
  shared->D = user_get_array_fixed<real_t, 1>(user, "D", shared->D, {shared->dim_D}, NA_REAL, NA_REAL);
  shared->dim_A = shared->dim_A_1 * shared->dim_A_2;
  shared->dim_A0 = shared->dim_A0_1 * shared->dim_A0_2;
  shared->dim_C = shared->dim_C_1 * shared->dim_C_2;
  shared->dim_cum_diag_a = shared->dim_cum_diag_a_1 * shared->dim_cum_diag_a_2;
  shared->dim_cum_diag_s = shared->dim_cum_diag_s_1 * shared->dim_cum_diag_s_2;
  shared->dim_cum_incid = shared->dim_cum_incid_1 * shared->dim_cum_incid_2;
  shared->dim_cum_screened = shared->dim_cum_screened_1 * shared->dim_cum_screened_2;
  shared->dim_cum_treated = shared->dim_cum_treated_1 * shared->dim_cum_treated_2;
  shared->dim_cum_vaccinated = shared->dim_cum_vaccinated_1 * shared->dim_cum_vaccinated_2;
  shared->dim_diag_a = shared->dim_diag_a_1 * shared->dim_diag_a_2;
  shared->dim_diag_s = shared->dim_diag_s_1 * shared->dim_diag_s_2;
  shared->dim_I = shared->dim_I_1 * shared->dim_I_2;
  shared->dim_I0 = shared->dim_I0_1 * shared->dim_I0_2;
  shared->dim_incid = shared->dim_incid_1 * shared->dim_incid_2;
  shared->dim_N = shared->dim_N_1 * shared->dim_N_2;
  shared->dim_n_A = shared->dim_n_A_1 * shared->dim_n_A_2;
  shared->dim_n_AT = shared->dim_n_AT_1 * shared->dim_n_AT_2;
  shared->dim_n_AU = shared->dim_n_AU_1 * shared->dim_n_AU_2;
  shared->dim_n_Aw = shared->dim_n_Aw_1 * shared->dim_n_Aw_2;
  shared->dim_n_Ax = shared->dim_n_Ax_1 * shared->dim_n_Ax_2;
  shared->dim_n_I = shared->dim_n_I_1 * shared->dim_n_I_2;
  shared->dim_n_IA = shared->dim_n_IA_1 * shared->dim_n_IA_2;
  shared->dim_n_IS = shared->dim_n_IS_1 * shared->dim_n_IS_2;
  shared->dim_n_Iw = shared->dim_n_Iw_1 * shared->dim_n_Iw_2;
  shared->dim_n_Ix = shared->dim_n_Ix_1 * shared->dim_n_Ix_2;
  shared->dim_n_S = shared->dim_n_S_1 * shared->dim_n_S_2;
  shared->dim_n_ST = shared->dim_n_ST_1 * shared->dim_n_ST_2;
  shared->dim_n_Sw = shared->dim_n_Sw_1 * shared->dim_n_Sw_2;
  shared->dim_n_Sx = shared->dim_n_Sx_1 * shared->dim_n_Sx_2;
  shared->dim_n_T = shared->dim_n_T_1 * shared->dim_n_T_2;
  shared->dim_n_TU = shared->dim_n_TU_1 * shared->dim_n_TU_2;
  shared->dim_n_Tw = shared->dim_n_Tw_1 * shared->dim_n_Tw_2;
  shared->dim_n_Tx = shared->dim_n_Tx_1 * shared->dim_n_Tx_2;
  shared->dim_n_U = shared->dim_n_U_1 * shared->dim_n_U_2;
  shared->dim_n_UI = shared->dim_n_UI_1 * shared->dim_n_UI_2;
  shared->dim_n_UU = shared->dim_n_UU_1 * shared->dim_n_UU_2;
  shared->dim_n_Uw = shared->dim_n_Uw_1 * shared->dim_n_Uw_2;
  shared->dim_n_Ux = shared->dim_n_Ux_1 * shared->dim_n_Ux_2;
  shared->dim_n_v = shared->dim_n_v_1 * shared->dim_n_v_2 * shared->dim_n_v_3;
  shared->dim_n_v_12 = shared->dim_n_v_1 * shared->dim_n_v_2;
  shared->dim_n_vbe = shared->dim_n_vbe_1 * shared->dim_n_vbe_2;
  shared->dim_n_vod = shared->dim_n_vod_1 * shared->dim_n_vod_2;
  shared->dim_n_vos = shared->dim_n_vos_1 * shared->dim_n_vos_2;
  shared->dim_n_xU = shared->dim_n_xU_1 * shared->dim_n_xU_2;
  shared->dim_r_A = shared->dim_r_A_1 * shared->dim_r_A_2;
  shared->dim_r_AT = shared->dim_r_AT_1 * shared->dim_r_AT_2;
  shared->dim_r_AU = shared->dim_r_AU_1 * shared->dim_r_AU_2;
  shared->dim_r_I = shared->dim_r_I_1 * shared->dim_r_I_2;
  shared->dim_r_S = shared->dim_r_S_1 * shared->dim_r_S_2;
  shared->dim_r_ST = shared->dim_r_ST_1 * shared->dim_r_ST_2;
  shared->dim_r_T = shared->dim_r_T_1 * shared->dim_r_T_2;
  shared->dim_r_TU = shared->dim_r_TU_1 * shared->dim_r_TU_2;
  shared->dim_r_U = shared->dim_r_U_1 * shared->dim_r_U_2;
  shared->dim_r_UI = shared->dim_r_UI_1 * shared->dim_r_UI_2;
  shared->dim_r_UU = shared->dim_r_UU_1 * shared->dim_r_UU_2;
  shared->dim_S = shared->dim_S_1 * shared->dim_S_2;
  shared->dim_S0 = shared->dim_S0_1 * shared->dim_S0_2;
  shared->dim_screened = shared->dim_screened_1 * shared->dim_screened_2;
  shared->dim_T = shared->dim_T_1 * shared->dim_T_2;
  shared->dim_T0 = shared->dim_T0_1 * shared->dim_T0_2;
  shared->dim_treated = shared->dim_treated_1 * shared->dim_treated_2;
  shared->dim_U = shared->dim_U_1 * shared->dim_U_2;
  shared->dim_u_vbe = shared->dim_u_vbe_1 * shared->dim_u_vbe_2;
  shared->dim_u_vod = shared->dim_u_vod_1 * shared->dim_u_vod_2;
  shared->dim_u_vos = shared->dim_u_vos_1 * shared->dim_u_vos_2;
  shared->dim_U0 = shared->dim_U0_1 * shared->dim_U0_2;
  shared->dim_vaccinated = shared->dim_vaccinated_1 * shared->dim_vaccinated_2;
  shared->dim_vbe = shared->dim_vbe_1 * shared->dim_vbe_2 * shared->dim_vbe_3;
  shared->dim_vbe_12 = shared->dim_vbe_1 * shared->dim_vbe_2;
  shared->dim_vod = shared->dim_vod_1 * shared->dim_vod_2 * shared->dim_vod_3;
  shared->dim_vod_12 = shared->dim_vod_1 * shared->dim_vod_2;
  shared->dim_vos = shared->dim_vos_1 * shared->dim_vos_2 * shared->dim_vos_3;
  shared->dim_vos_12 = shared->dim_vos_1 * shared->dim_vos_2;
  shared->dim_w = shared->dim_w_1 * shared->dim_w_2;
  shared->dim_wA = shared->dim_wA_1 * shared->dim_wA_2 * shared->dim_wA_3;
  shared->dim_wA_12 = shared->dim_wA_1 * shared->dim_wA_2;
  shared->dim_wI = shared->dim_wI_1 * shared->dim_wI_2 * shared->dim_wI_3;
  shared->dim_wI_12 = shared->dim_wI_1 * shared->dim_wI_2;
  shared->dim_wS = shared->dim_wS_1 * shared->dim_wS_2 * shared->dim_wS_3;
  shared->dim_wS_12 = shared->dim_wS_1 * shared->dim_wS_2;
  shared->dim_wT = shared->dim_wT_1 * shared->dim_wT_2 * shared->dim_wT_3;
  shared->dim_wT_12 = shared->dim_wT_1 * shared->dim_wT_2;
  shared->dim_wU = shared->dim_wU_1 * shared->dim_wU_2 * shared->dim_wU_3;
  shared->dim_wU_12 = shared->dim_wU_1 * shared->dim_wU_2;
  shared->p = user_get_array_fixed<real_t, 1>(user, "p", shared->p, {shared->dim_p}, NA_REAL, NA_REAL);
  shared->q = user_get_array_fixed<real_t, 1>(user, "q", shared->q, {shared->dim_q}, NA_REAL, NA_REAL);
  shared->vea = user_get_array_fixed<real_t, 1>(user, "vea", shared->vea, {shared->dim_vea}, NA_REAL, NA_REAL);
  shared->ved = user_get_array_fixed<real_t, 1>(user, "ved", shared->ved, {shared->dim_ved}, NA_REAL, NA_REAL);
  shared->vei = user_get_array_fixed<real_t, 1>(user, "vei", shared->vei, {shared->dim_vei}, NA_REAL, NA_REAL);
  shared->ves = user_get_array_fixed<real_t, 1>(user, "ves", shared->ves, {shared->dim_ves}, NA_REAL, NA_REAL);
  shared->A0 = user_get_array_fixed<real_t, 2>(user, "A0", shared->A0, {shared->dim_A0_1, shared->dim_A0_2}, NA_REAL, NA_REAL);
  internal.C = std::vector<real_t>(shared->dim_C);
  shared->initial_A = std::vector<real_t>(shared->dim_A);
  shared->initial_cum_diag_a = std::vector<real_t>(shared->dim_cum_diag_a);
  shared->initial_cum_diag_s = std::vector<real_t>(shared->dim_cum_diag_s);
  shared->initial_cum_incid = std::vector<real_t>(shared->dim_cum_incid);
  shared->initial_cum_screened = std::vector<real_t>(shared->dim_cum_screened);
  shared->initial_cum_treated = std::vector<real_t>(shared->dim_cum_treated);
  shared->initial_cum_vaccinated = std::vector<real_t>(shared->dim_cum_vaccinated);
  shared->initial_diag_a = std::vector<real_t>(shared->dim_diag_a);
  shared->initial_diag_s = std::vector<real_t>(shared->dim_diag_s);
  shared->initial_I = std::vector<real_t>(shared->dim_I);
  shared->initial_incid = std::vector<real_t>(shared->dim_incid);
  shared->initial_N = std::vector<real_t>(shared->dim_N);
  shared->initial_S = std::vector<real_t>(shared->dim_S);
  shared->initial_screened = std::vector<real_t>(shared->dim_screened);
  shared->initial_T = std::vector<real_t>(shared->dim_T);
  shared->initial_treated = std::vector<real_t>(shared->dim_treated);
  shared->initial_U = std::vector<real_t>(shared->dim_U);
  shared->initial_vaccinated = std::vector<real_t>(shared->dim_vaccinated);
  internal.n_A = std::vector<real_t>(shared->dim_n_A);
  internal.n_AT = std::vector<real_t>(shared->dim_n_AT);
  internal.n_AU = std::vector<real_t>(shared->dim_n_AU);
  internal.n_Aw = std::vector<real_t>(shared->dim_n_Aw);
  internal.n_Ax = std::vector<real_t>(shared->dim_n_Ax);
  internal.n_I = std::vector<real_t>(shared->dim_n_I);
  internal.n_IA = std::vector<real_t>(shared->dim_n_IA);
  internal.n_IS = std::vector<real_t>(shared->dim_n_IS);
  internal.n_Iw = std::vector<real_t>(shared->dim_n_Iw);
  internal.n_Ix = std::vector<real_t>(shared->dim_n_Ix);
  internal.n_S = std::vector<real_t>(shared->dim_n_S);
  internal.n_ST = std::vector<real_t>(shared->dim_n_ST);
  internal.n_Sw = std::vector<real_t>(shared->dim_n_Sw);
  internal.n_Sx = std::vector<real_t>(shared->dim_n_Sx);
  internal.n_T = std::vector<real_t>(shared->dim_n_T);
  internal.n_TU = std::vector<real_t>(shared->dim_n_TU);
  internal.n_Tw = std::vector<real_t>(shared->dim_n_Tw);
  internal.n_Tx = std::vector<real_t>(shared->dim_n_Tx);
  internal.n_U = std::vector<real_t>(shared->dim_n_U);
  internal.n_UI = std::vector<real_t>(shared->dim_n_UI);
  internal.n_UU = std::vector<real_t>(shared->dim_n_UU);
  internal.n_Uw = std::vector<real_t>(shared->dim_n_Uw);
  internal.n_Ux = std::vector<real_t>(shared->dim_n_Ux);
  internal.n_v = std::vector<real_t>(shared->dim_n_v);
  internal.n_vbe = std::vector<real_t>(shared->dim_n_vbe);
  internal.n_vod = std::vector<real_t>(shared->dim_n_vod);
  internal.n_vos = std::vector<real_t>(shared->dim_n_vos);
  internal.n_xU = std::vector<real_t>(shared->dim_n_xU);
  internal.r_A = std::vector<real_t>(shared->dim_r_A);
  internal.r_AT = std::vector<real_t>(shared->dim_r_AT);
  shared->r_AU = std::vector<real_t>(shared->dim_r_AU);
  shared->r_I = std::vector<real_t>(shared->dim_r_I);
  shared->r_S = std::vector<real_t>(shared->dim_r_S);
  shared->r_ST = std::vector<real_t>(shared->dim_r_ST);
  shared->r_T = std::vector<real_t>(shared->dim_r_T);
  shared->r_TU = std::vector<real_t>(shared->dim_r_TU);
  internal.r_U = std::vector<real_t>(shared->dim_r_U);
  internal.r_UI = std::vector<real_t>(shared->dim_r_UI);
  internal.r_UU = std::vector<real_t>(shared->dim_r_UU);
  internal.wA = std::vector<real_t>(shared->dim_wA);
  internal.wI = std::vector<real_t>(shared->dim_wI);
  internal.wS = std::vector<real_t>(shared->dim_wS);
  internal.wT = std::vector<real_t>(shared->dim_wT);
  internal.wU = std::vector<real_t>(shared->dim_wU);
  shared->I0 = user_get_array_fixed<real_t, 2>(user, "I0", shared->I0, {shared->dim_I0_1, shared->dim_I0_2}, NA_REAL, NA_REAL);
  for (int i = 1; i <= shared->dim_cum_diag_a_1; ++i) {
    for (int j = 1; j <= shared->dim_cum_diag_a_2; ++j) {
      shared->initial_cum_diag_a[i - 1 + shared->dim_cum_diag_a_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_cum_diag_s_1; ++i) {
    for (int j = 1; j <= shared->dim_cum_diag_s_2; ++j) {
      shared->initial_cum_diag_s[i - 1 + shared->dim_cum_diag_s_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_cum_incid_1; ++i) {
    for (int j = 1; j <= shared->dim_cum_incid_2; ++j) {
      shared->initial_cum_incid[i - 1 + shared->dim_cum_incid_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_cum_screened_1; ++i) {
    for (int j = 1; j <= shared->dim_cum_screened_2; ++j) {
      shared->initial_cum_screened[i - 1 + shared->dim_cum_screened_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_cum_treated_1; ++i) {
    for (int j = 1; j <= shared->dim_cum_treated_2; ++j) {
      shared->initial_cum_treated[i - 1 + shared->dim_cum_treated_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_cum_vaccinated_1; ++i) {
    for (int j = 1; j <= shared->dim_cum_vaccinated_2; ++j) {
      shared->initial_cum_vaccinated[i - 1 + shared->dim_cum_vaccinated_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_diag_a_1; ++i) {
    for (int j = 1; j <= shared->dim_diag_a_2; ++j) {
      shared->initial_diag_a[i - 1 + shared->dim_diag_a_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_diag_s_1; ++i) {
    for (int j = 1; j <= shared->dim_diag_s_2; ++j) {
      shared->initial_diag_s[i - 1 + shared->dim_diag_s_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_incid_1; ++i) {
    for (int j = 1; j <= shared->dim_incid_2; ++j) {
      shared->initial_incid[i - 1 + shared->dim_incid_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_screened_1; ++i) {
    for (int j = 1; j <= shared->dim_screened_2; ++j) {
      shared->initial_screened[i - 1 + shared->dim_screened_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_treated_1; ++i) {
    for (int j = 1; j <= shared->dim_treated_2; ++j) {
      shared->initial_treated[i - 1 + shared->dim_treated_1 * (j - 1)] = 0;
    }
  }
  for (int i = 1; i <= shared->dim_vaccinated_1; ++i) {
    for (int j = 1; j <= shared->dim_vaccinated_2; ++j) {
      shared->initial_vaccinated[i - 1 + shared->dim_vaccinated_1 * (j - 1)] = 0;
    }
  }
  shared->offset_variable_A = shared->dim_eta + shared->dim_I + shared->dim_lambda + shared->dim_U + 4;
  shared->offset_variable_cum_diag_a = shared->dim_A + shared->dim_cum_incid + shared->dim_eta + shared->dim_I + shared->dim_lambda + shared->dim_S + shared->dim_T + shared->dim_U + 4;
  shared->offset_variable_cum_diag_s = shared->dim_A + shared->dim_cum_diag_a + shared->dim_cum_incid + shared->dim_eta + shared->dim_I + shared->dim_lambda + shared->dim_S + shared->dim_T + shared->dim_U + 4;
  shared->offset_variable_cum_incid = shared->dim_A + shared->dim_eta + shared->dim_I + shared->dim_lambda + shared->dim_S + shared->dim_T + shared->dim_U + 4;
  shared->offset_variable_cum_screened = shared->dim_A + shared->dim_cum_diag_a + shared->dim_cum_diag_s + shared->dim_cum_incid + shared->dim_cum_treated + shared->dim_eta + shared->dim_I + shared->dim_lambda + shared->dim_S + shared->dim_T + shared->dim_U + 4;
  shared->offset_variable_cum_treated = shared->dim_A + shared->dim_cum_diag_a + shared->dim_cum_diag_s + shared->dim_cum_incid + shared->dim_eta + shared->dim_I + shared->dim_lambda + shared->dim_S + shared->dim_T + shared->dim_U + 4;
  shared->offset_variable_cum_vaccinated = shared->dim_A + shared->dim_cum_diag_a + shared->dim_cum_diag_s + shared->dim_cum_incid + shared->dim_cum_screened + shared->dim_cum_treated + shared->dim_eta + shared->dim_I + shared->dim_lambda + shared->dim_S + shared->dim_T + shared->dim_U + 4;
  shared->offset_variable_diag_a = shared->dim_A + shared->dim_cum_diag_a + shared->dim_cum_diag_s + shared->dim_cum_incid + shared->dim_cum_screened + shared->dim_cum_treated + shared->dim_cum_vaccinated + shared->dim_eta + shared->dim_I + shared->dim_incid + shared->dim_lambda + shared->dim_S + shared->dim_T + shared->dim_U + 4;
  shared->offset_variable_diag_s = shared->dim_A + shared->dim_cum_diag_a + shared->dim_cum_diag_s + shared->dim_cum_incid + shared->dim_cum_screened + shared->dim_cum_treated + shared->dim_cum_vaccinated + shared->dim_diag_a + shared->dim_eta + shared->dim_I + shared->dim_incid + shared->dim_lambda + shared->dim_S + shared->dim_T + shared->dim_U + 4;
  shared->offset_variable_I = shared->dim_eta + shared->dim_lambda + shared->dim_U + 4;
  shared->offset_variable_incid = shared->dim_A + shared->dim_cum_diag_a + shared->dim_cum_diag_s + shared->dim_cum_incid + shared->dim_cum_screened + shared->dim_cum_treated + shared->dim_cum_vaccinated + shared->dim_eta + shared->dim_I + shared->dim_lambda + shared->dim_S + shared->dim_T + shared->dim_U + 4;
  shared->offset_variable_N = shared->dim_A + shared->dim_cum_diag_a + shared->dim_cum_diag_s + shared->dim_cum_incid + shared->dim_cum_screened + shared->dim_cum_treated + shared->dim_cum_vaccinated + shared->dim_diag_a + shared->dim_diag_s + shared->dim_eta + shared->dim_I + shared->dim_incid + shared->dim_lambda + shared->dim_S + shared->dim_screened + shared->dim_T + shared->dim_treated + shared->dim_U + shared->dim_vaccinated + 4;
  shared->offset_variable_S = shared->dim_A + shared->dim_eta + shared->dim_I + shared->dim_lambda + shared->dim_U + 4;
  shared->offset_variable_screened = shared->dim_A + shared->dim_cum_diag_a + shared->dim_cum_diag_s + shared->dim_cum_incid + shared->dim_cum_screened + shared->dim_cum_treated + shared->dim_cum_vaccinated + shared->dim_diag_a + shared->dim_diag_s + shared->dim_eta + shared->dim_I + shared->dim_incid + shared->dim_lambda + shared->dim_S + shared->dim_T + shared->dim_treated + shared->dim_U + 4;
  shared->offset_variable_T = shared->dim_A + shared->dim_eta + shared->dim_I + shared->dim_lambda + shared->dim_S + shared->dim_U + 4;
  shared->offset_variable_treated = shared->dim_A + shared->dim_cum_diag_a + shared->dim_cum_diag_s + shared->dim_cum_incid + shared->dim_cum_screened + shared->dim_cum_treated + shared->dim_cum_vaccinated + shared->dim_diag_a + shared->dim_diag_s + shared->dim_eta + shared->dim_I + shared->dim_incid + shared->dim_lambda + shared->dim_S + shared->dim_T + shared->dim_U + 4;
  shared->offset_variable_vaccinated = shared->dim_A + shared->dim_cum_diag_a + shared->dim_cum_diag_s + shared->dim_cum_incid + shared->dim_cum_screened + shared->dim_cum_treated + shared->dim_cum_vaccinated + shared->dim_diag_a + shared->dim_diag_s + shared->dim_eta + shared->dim_I + shared->dim_incid + shared->dim_lambda + shared->dim_S + shared->dim_screened + shared->dim_T + shared->dim_treated + shared->dim_U + 4;
  shared->S0 = user_get_array_fixed<real_t, 2>(user, "S0", shared->S0, {shared->dim_S0_1, shared->dim_S0_2}, NA_REAL, NA_REAL);
  shared->T0 = user_get_array_fixed<real_t, 2>(user, "T0", shared->T0, {shared->dim_T0_1, shared->dim_T0_2}, NA_REAL, NA_REAL);
  shared->u_vbe = user_get_array_fixed<real_t, 2>(user, "u_vbe", shared->u_vbe, {shared->dim_u_vbe_1, shared->dim_u_vbe_2}, NA_REAL, NA_REAL);
  shared->u_vod = user_get_array_fixed<real_t, 2>(user, "u_vod", shared->u_vod, {shared->dim_u_vod_1, shared->dim_u_vod_2}, NA_REAL, NA_REAL);
  shared->u_vos = user_get_array_fixed<real_t, 2>(user, "u_vos", shared->u_vos, {shared->dim_u_vos_1, shared->dim_u_vos_2}, NA_REAL, NA_REAL);
  shared->U0 = user_get_array_fixed<real_t, 2>(user, "U0", shared->U0, {shared->dim_U0_1, shared->dim_U0_2}, NA_REAL, NA_REAL);
  shared->vbe = user_get_array_fixed<real_t, 3>(user, "vbe", shared->vbe, {shared->dim_vbe_1, shared->dim_vbe_2, shared->dim_vbe_3}, NA_REAL, NA_REAL);
  shared->vod = user_get_array_fixed<real_t, 3>(user, "vod", shared->vod, {shared->dim_vod_1, shared->dim_vod_2, shared->dim_vod_3}, NA_REAL, NA_REAL);
  shared->vos = user_get_array_fixed<real_t, 3>(user, "vos", shared->vos, {shared->dim_vos_1, shared->dim_vos_2, shared->dim_vos_3}, NA_REAL, NA_REAL);
  shared->w = user_get_array_fixed<real_t, 2>(user, "w", shared->w, {shared->dim_w_1, shared->dim_w_2}, NA_REAL, NA_REAL);
  for (int i = 1; i <= shared->dim_A_1; ++i) {
    for (int j = 1; j <= shared->dim_A_2; ++j) {
      shared->initial_A[i - 1 + shared->dim_A_1 * (j - 1)] = shared->A0[shared->dim_A0_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_I_1; ++i) {
    for (int j = 1; j <= shared->dim_I_2; ++j) {
      shared->initial_I[i - 1 + shared->dim_I_1 * (j - 1)] = shared->I0[shared->dim_I0_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_N_1; ++i) {
    for (int j = 1; j <= shared->dim_N_2; ++j) {
      shared->initial_N[i - 1 + shared->dim_N_1 * (j - 1)] = shared->U0[shared->dim_U0_1 * (j - 1) + i - 1] + shared->I0[shared->dim_I0_1 * (j - 1) + i - 1] + shared->A0[shared->dim_A0_1 * (j - 1) + i - 1] + shared->S0[shared->dim_S0_1 * (j - 1) + i - 1] + shared->T0[shared->dim_T0_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_S_1; ++i) {
    for (int j = 1; j <= shared->dim_S_2; ++j) {
      shared->initial_S[i - 1 + shared->dim_S_1 * (j - 1)] = shared->S0[shared->dim_S0_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_T_1; ++i) {
    for (int j = 1; j <= shared->dim_T_2; ++j) {
      shared->initial_T[i - 1 + shared->dim_T_1 * (j - 1)] = shared->T0[shared->dim_T0_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_U_1; ++i) {
    for (int j = 1; j <= shared->dim_U_2; ++j) {
      shared->initial_U[i - 1 + shared->dim_U_1 * (j - 1)] = shared->U0[shared->dim_U0_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_r_AU_1; ++i) {
    for (int j = 1; j <= shared->dim_r_AU_2; ++j) {
      shared->r_AU[i - 1 + shared->dim_r_AU_1 * (j - 1)] = shared->nu / (real_t) (1 - shared->ved[j - 1]);
    }
  }
  for (int i = 1; i <= shared->dim_r_I_1; ++i) {
    for (int j = 1; j <= shared->dim_r_I_2; ++j) {
      shared->r_I[i - 1 + shared->dim_r_I_1 * (j - 1)] = shared->sigma + shared->exr;
    }
  }
  for (int i = 1; i <= shared->dim_r_ST_1; ++i) {
    for (int j = 1; j <= shared->dim_r_ST_2; ++j) {
      shared->r_ST[i - 1 + shared->dim_r_ST_1 * (j - 1)] = shared->mu;
    }
  }
  for (int i = 1; i <= shared->dim_r_TU_1; ++i) {
    for (int j = 1; j <= shared->dim_r_TU_2; ++j) {
      shared->r_TU[i - 1 + shared->dim_r_TU_1 * (j - 1)] = shared->rho;
    }
  }
  for (int i = 1; i <= shared->dim_r_S_1; ++i) {
    for (int j = 1; j <= shared->dim_r_S_2; ++j) {
      shared->r_S[i - 1 + shared->dim_r_S_1 * (j - 1)] = shared->r_ST[shared->dim_r_ST_1 * (j - 1) + i - 1] + shared->exr;
    }
  }
  for (int i = 1; i <= shared->dim_r_T_1; ++i) {
    for (int j = 1; j <= shared->dim_r_T_2; ++j) {
      shared->r_T[i - 1 + shared->dim_r_T_1 * (j - 1)] = shared->r_TU[shared->dim_r_TU_1 * (j - 1) + i - 1] + shared->exr;
    }
  }
  return dust::pars_t<model>(shared, internal);
}
template <>
cpp11::sexp dust_info<model>(const dust::pars_t<model>& pars) {
  const model::internal_t internal = pars.internal;
  const std::shared_ptr<const model::shared_t> shared = pars.shared;
  cpp11::writable::strings nms({"time", "entrants", "leavers", "beta", "eta", "lambda", "U", "I", "A", "S", "T", "cum_incid", "cum_diag_a", "cum_diag_s", "cum_treated", "cum_screened", "cum_vaccinated", "incid", "diag_a", "diag_s", "treated", "screened", "vaccinated", "N"});
  cpp11::writable::list dim(24);
  dim[0] = cpp11::writable::integers({1});
  dim[1] = cpp11::writable::integers({1});
  dim[2] = cpp11::writable::integers({1});
  dim[3] = cpp11::writable::integers({1});
  dim[4] = cpp11::writable::integers({shared->dim_eta});
  dim[5] = cpp11::writable::integers({shared->dim_lambda});
  dim[6] = cpp11::writable::integers({shared->dim_U_1, shared->dim_U_2});
  dim[7] = cpp11::writable::integers({shared->dim_I_1, shared->dim_I_2});
  dim[8] = cpp11::writable::integers({shared->dim_A_1, shared->dim_A_2});
  dim[9] = cpp11::writable::integers({shared->dim_S_1, shared->dim_S_2});
  dim[10] = cpp11::writable::integers({shared->dim_T_1, shared->dim_T_2});
  dim[11] = cpp11::writable::integers({shared->dim_cum_incid_1, shared->dim_cum_incid_2});
  dim[12] = cpp11::writable::integers({shared->dim_cum_diag_a_1, shared->dim_cum_diag_a_2});
  dim[13] = cpp11::writable::integers({shared->dim_cum_diag_s_1, shared->dim_cum_diag_s_2});
  dim[14] = cpp11::writable::integers({shared->dim_cum_treated_1, shared->dim_cum_treated_2});
  dim[15] = cpp11::writable::integers({shared->dim_cum_screened_1, shared->dim_cum_screened_2});
  dim[16] = cpp11::writable::integers({shared->dim_cum_vaccinated_1, shared->dim_cum_vaccinated_2});
  dim[17] = cpp11::writable::integers({shared->dim_incid_1, shared->dim_incid_2});
  dim[18] = cpp11::writable::integers({shared->dim_diag_a_1, shared->dim_diag_a_2});
  dim[19] = cpp11::writable::integers({shared->dim_diag_s_1, shared->dim_diag_s_2});
  dim[20] = cpp11::writable::integers({shared->dim_treated_1, shared->dim_treated_2});
  dim[21] = cpp11::writable::integers({shared->dim_screened_1, shared->dim_screened_2});
  dim[22] = cpp11::writable::integers({shared->dim_vaccinated_1, shared->dim_vaccinated_2});
  dim[23] = cpp11::writable::integers({shared->dim_N_1, shared->dim_N_2});
  dim.names() = nms;
  cpp11::writable::list index(24);
  index[0] = cpp11::writable::integers({1});
  index[1] = cpp11::writable::integers({2});
  index[2] = cpp11::writable::integers({3});
  index[3] = cpp11::writable::integers({4});
  index[4] = integer_sequence(5, shared->dim_eta);
  index[5] = integer_sequence(shared->offset_variable_lambda + 1, shared->dim_lambda);
  index[6] = integer_sequence(shared->offset_variable_U + 1, shared->dim_U);
  index[7] = integer_sequence(shared->offset_variable_I + 1, shared->dim_I);
  index[8] = integer_sequence(shared->offset_variable_A + 1, shared->dim_A);
  index[9] = integer_sequence(shared->offset_variable_S + 1, shared->dim_S);
  index[10] = integer_sequence(shared->offset_variable_T + 1, shared->dim_T);
  index[11] = integer_sequence(shared->offset_variable_cum_incid + 1, shared->dim_cum_incid);
  index[12] = integer_sequence(shared->offset_variable_cum_diag_a + 1, shared->dim_cum_diag_a);
  index[13] = integer_sequence(shared->offset_variable_cum_diag_s + 1, shared->dim_cum_diag_s);
  index[14] = integer_sequence(shared->offset_variable_cum_treated + 1, shared->dim_cum_treated);
  index[15] = integer_sequence(shared->offset_variable_cum_screened + 1, shared->dim_cum_screened);
  index[16] = integer_sequence(shared->offset_variable_cum_vaccinated + 1, shared->dim_cum_vaccinated);
  index[17] = integer_sequence(shared->offset_variable_incid + 1, shared->dim_incid);
  index[18] = integer_sequence(shared->offset_variable_diag_a + 1, shared->dim_diag_a);
  index[19] = integer_sequence(shared->offset_variable_diag_s + 1, shared->dim_diag_s);
  index[20] = integer_sequence(shared->offset_variable_treated + 1, shared->dim_treated);
  index[21] = integer_sequence(shared->offset_variable_screened + 1, shared->dim_screened);
  index[22] = integer_sequence(shared->offset_variable_vaccinated + 1, shared->dim_vaccinated);
  index[23] = integer_sequence(shared->offset_variable_N + 1, shared->dim_N);
  index.names() = nms;
  size_t len = shared->offset_variable_N + shared->dim_N;
  using namespace cpp11::literals;
  return cpp11::writable::list({
           "dim"_nm = dim,
           "len"_nm = len,
           "index"_nm = index});
}
}
